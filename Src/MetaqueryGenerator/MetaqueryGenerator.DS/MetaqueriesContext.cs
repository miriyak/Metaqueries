

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "MetaqueryGenerator.DS\App.Config"
//     Connection String Name: "MetaqueriesEntities"
//     Connection String:      "Data Source=.\SQLEXPRESS;Initial Catalog=Metaqueries;Integrated Security=True;Application Name=EntityFramework Reverse POCO Generator"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MetaqueryGenerator.DS
{
    using System.Linq;

    #region Unit of work

    public interface IMetaqueriesContext : System.IDisposable
    {
        System.Data.Entity.DbSet<SysColumnsType> SysColumnsTypes { get; set; } // Sys_ColumnsTypes
        System.Data.Entity.DbSet<TblDatabaseManagement> TblDatabaseManagements { get; set; } // Tbl_DatabaseManagement
        System.Data.Entity.DbSet<TblMetaqueriesResult> TblMetaqueriesResults { get; set; } // Tbl_MetaqueriesResults
        System.Data.Entity.DbSet<TblMetaquery> TblMetaqueries { get; set; } // Tbl_Metaqueries
        System.Data.Entity.DbSet<TblStatus> TblStatus { get; set; } // Tbl_Statuses
        System.Data.Entity.DbSet<VMetaqueriesResult> VMetaqueriesResults { get; set; } // V_MetaqueriesResult
        System.Data.Entity.DbSet<VMetaquery> VMetaqueries { get; set; } // V_Metaqueries

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class MetaqueriesContext : System.Data.Entity.DbContext, IMetaqueriesContext
    {
        public System.Data.Entity.DbSet<SysColumnsType> SysColumnsTypes { get; set; } // Sys_ColumnsTypes
        public System.Data.Entity.DbSet<TblDatabaseManagement> TblDatabaseManagements { get; set; } // Tbl_DatabaseManagement
        public System.Data.Entity.DbSet<TblMetaqueriesResult> TblMetaqueriesResults { get; set; } // Tbl_MetaqueriesResults
        public System.Data.Entity.DbSet<TblMetaquery> TblMetaqueries { get; set; } // Tbl_Metaqueries
        public System.Data.Entity.DbSet<TblStatus> TblStatus { get; set; } // Tbl_Statuses
        public System.Data.Entity.DbSet<VMetaqueriesResult> VMetaqueriesResults { get; set; } // V_MetaqueriesResult
        public System.Data.Entity.DbSet<VMetaquery> VMetaqueries { get; set; } // V_Metaqueries

        static MetaqueriesContext()
        {
            System.Data.Entity.Database.SetInitializer<MetaqueriesContext>(null);
        }

        public MetaqueriesContext()
            : base("Name=MetaqueriesEntities")
        {
            InitializePartial();
        }

        public MetaqueriesContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public MetaqueriesContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public MetaqueriesContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public MetaqueriesContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new SysColumnsTypeConfiguration());
            modelBuilder.Configurations.Add(new TblDatabaseManagementConfiguration());
            modelBuilder.Configurations.Add(new TblMetaqueriesResultConfiguration());
            modelBuilder.Configurations.Add(new TblMetaqueryConfiguration());
            modelBuilder.Configurations.Add(new TblStatusConfiguration());
            modelBuilder.Configurations.Add(new VMetaqueriesResultConfiguration());
            modelBuilder.Configurations.Add(new VMetaqueryConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new SysColumnsTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TblDatabaseManagementConfiguration(schema));
            modelBuilder.Configurations.Add(new TblMetaqueriesResultConfiguration(schema));
            modelBuilder.Configurations.Add(new TblMetaqueryConfiguration(schema));
            modelBuilder.Configurations.Add(new TblStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new VMetaqueriesResultConfiguration(schema));
            modelBuilder.Configurations.Add(new VMetaqueryConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
    #endregion

    #region Database context factory

    public class MetaqueriesContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MetaqueriesContext>
    {
        public MetaqueriesContext Create()
        {
            return new MetaqueriesContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class FakeMetaqueriesContext : IMetaqueriesContext
    {
        public System.Data.Entity.DbSet<SysColumnsType> SysColumnsTypes { get; set; }
        public System.Data.Entity.DbSet<TblDatabaseManagement> TblDatabaseManagements { get; set; }
        public System.Data.Entity.DbSet<TblMetaqueriesResult> TblMetaqueriesResults { get; set; }
        public System.Data.Entity.DbSet<TblMetaquery> TblMetaqueries { get; set; }
        public System.Data.Entity.DbSet<TblStatus> TblStatus { get; set; }
        public System.Data.Entity.DbSet<VMetaqueriesResult> VMetaqueriesResults { get; set; }
        public System.Data.Entity.DbSet<VMetaquery> VMetaqueries { get; set; }

        public FakeMetaqueriesContext()
        {
            SysColumnsTypes = new FakeDbSet<SysColumnsType>("TableName", "ColumnName", "Type");
            TblDatabaseManagements = new FakeDbSet<TblDatabaseManagement>("Id");
            TblMetaqueriesResults = new FakeDbSet<TblMetaqueriesResult>("Id");
            TblMetaqueries = new FakeDbSet<TblMetaquery>("Id");
            TblStatus = new FakeDbSet<TblStatus>("Id");
            VMetaqueriesResults = new FakeDbSet<VMetaqueriesResult>("Id", "FkMetaqueryId", "Metaquery", "SupportValue", "ConfidenceValue", "Assignment");
            VMetaqueries = new FakeDbSet<VMetaquery>("Id", "FkDatabaseId", "Metaquery", "FkStatusId", "IsExpanded", "Arity", "LastUpdatedDate");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Sys_ColumnsTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class SysColumnsType
    {

        ///<summary>
        /// שם טבלה
        ///</summary>
        public string TableName { get; set; } // TableName (Primary key) (length: 100)

        ///<summary>
        /// שם עמודה
        ///</summary>
        public string ColumnName { get; set; } // ColumnName (Primary key) (length: 100)

        ///<summary>
        /// סוג עמודה
        ///</summary>
        public string Type { get; set; } // Type (Primary key) (length: 100)

        public SysColumnsType()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Tbl_DatabaseManagement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblDatabaseManagement
    {

        ///<summary>
        /// מספור רץ
        ///</summary>
        public int Id { get; set; } // Id (Primary key)

        ///<summary>
        /// שם מסד נתונים
        ///</summary>
        public string DbName { get; set; } // DBName (length: 100)

        ///<summary>
        /// קישור למסד
        ///</summary>
        public string ConnectionString { get; set; } // ConnectionString (length: 500)

        ///<summary>
        /// Support- ערך סף
        ///</summary>
        public decimal SupportThreshold { get; set; } // SupportThreshold

        ///<summary>
        /// Confidence - ערך סף
        ///</summary>
        public decimal ConfidenceThreshold { get; set; } // ConfidenceThreshold

        ///<summary>
        /// תאריך יצירה
        ///</summary>
        public System.DateTime CreatedDate { get; set; } // CreatedDate

        ///<summary>
        /// זמן התחלת טיפול
        ///</summary>
        public System.DateTime? StartTime { get; set; } // StartTime

        ///<summary>
        /// זמן סיום טיפול
        ///</summary>
        public System.DateTime? FinishTime { get; set; } // FinishTime

        ///<summary>
        /// סטטוס התהליך
        ///</summary>
        public int FkStatusId { get; set; } // FK_StatusId

        ///<summary>
        /// תאריך עדכון אחרון
        ///</summary>
        public System.DateTime LastUpdatedDate { get; set; } // LastUpdatedDate

        ///<summary>
        /// מקסימום משתנים  ביחס
        ///</summary>
        public int MaxVariablesInRelation { get; set; } // MaxVariablesInRelation
        public int CurrentArity { get; set; } // CurrentArity
        public int MaxArity { get; set; } // MaxArity

        // Reverse navigation

        /// <summary>
        /// Child TblMetaqueries where [Tbl_Metaqueries].[FK_DatabaseID] point to this entity (FK_Tbl_Metaqueries_Tbl_DatabaseManagement)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TblMetaquery> TblMetaqueries { get; set; } // Tbl_Metaqueries.FK_Tbl_Metaqueries_Tbl_DatabaseManagement

        // Foreign keys

        /// <summary>
        /// Parent TblStatus pointed by [Tbl_DatabaseManagement].([FkStatusId]) (FK_DatabaseManagement_Statuses)
        /// </summary>
        public virtual TblStatus TblStatus { get; set; } // FK_DatabaseManagement_Statuses

        public TblDatabaseManagement()
        {
            TblMetaqueries = new System.Collections.Generic.List<TblMetaquery>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Tbl_MetaqueriesResults
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblMetaqueriesResult
    {
        public int Id { get; set; } // Id (Primary key)
        public int FkMetaqueryId { get; set; } // FK_MetaqueryID

        ///<summary>
        /// Support- ערך
        ///</summary>
        public decimal SupportValue { get; set; } // SupportValue

        ///<summary>
        /// Confidence - ערך
        ///</summary>
        public decimal ConfidenceValue { get; set; } // ConfidenceValue

        ///<summary>
        /// הצבה של הפתרון
        ///</summary>
        public string Assignment { get; set; } // Assignment

        // Foreign keys

        /// <summary>
        /// Parent TblMetaquery pointed by [Tbl_MetaqueriesResults].([FkMetaqueryId]) (FK_Tbl_MetaqueriesResults_Tbl_Metaqueries)
        /// </summary>
        public virtual TblMetaquery TblMetaquery { get; set; } // FK_Tbl_MetaqueriesResults_Tbl_Metaqueries

        public TblMetaqueriesResult()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Tbl_Metaqueries
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblMetaquery
    {

        ///<summary>
        /// מספור רץ
        ///</summary>
        public int Id { get; set; } // Id (Primary key)
        public int FkDatabaseId { get; set; } // FK_DatabaseID

        ///<summary>
        /// ערך התבנית
        ///</summary>
        public string Metaquery { get; set; } // Metaquery

        ///<summary>
        /// סטטוס התהליך
        ///</summary>
        public int FkStatusId { get; set; } // FK_StatusId

        ///<summary>
        /// האם קיים תוצאות לתבנית
        ///</summary>
        public int? HasResult { get; set; } // HasResult

        ///<summary>
        /// האם הופעל הרחבה
        ///</summary>
        public bool IsExpanded { get; set; } // IsExpanded

        ///<summary>
        /// מספר משתנים
        ///</summary>
        public int Arity { get; set; } // Arity

        ///<summary>
        /// תאריך יצירה
        ///</summary>
        public System.DateTime? CreatedDate { get; set; } // CreatedDate

        ///<summary>
        /// תאריך עדכון אחרון
        ///</summary>
        public System.DateTime LastUpdatedDate { get; set; } // LastUpdatedDate

        ///<summary>
        /// זמן התחלת טיפול
        ///</summary>
        public System.DateTime? StartTime { get; set; } // StartTime

        ///<summary>
        /// זמן סיום טיפול
        ///</summary>
        public System.DateTime? FinishTime { get; set; } // FinishTime

        // Reverse navigation

        /// <summary>
        /// Child TblMetaqueriesResults where [Tbl_MetaqueriesResults].[FK_MetaqueryID] point to this entity (FK_Tbl_MetaqueriesResults_Tbl_Metaqueries)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TblMetaqueriesResult> TblMetaqueriesResults { get; set; } // Tbl_MetaqueriesResults.FK_Tbl_MetaqueriesResults_Tbl_Metaqueries

        // Foreign keys

        /// <summary>
        /// Parent TblDatabaseManagement pointed by [Tbl_Metaqueries].([FkDatabaseId]) (FK_Tbl_Metaqueries_Tbl_DatabaseManagement)
        /// </summary>
        public virtual TblDatabaseManagement TblDatabaseManagement { get; set; } // FK_Tbl_Metaqueries_Tbl_DatabaseManagement

        /// <summary>
        /// Parent TblStatus pointed by [Tbl_Metaqueries].([FkStatusId]) (FK_Tbl_Metaqueries_Tbl_Statuses)
        /// </summary>
        public virtual TblStatus TblStatus { get; set; } // FK_Tbl_Metaqueries_Tbl_Statuses

        public TblMetaquery()
        {
            TblMetaqueriesResults = new System.Collections.Generic.List<TblMetaqueriesResult>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Tbl_Statuses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child TblDatabaseManagements where [Tbl_DatabaseManagement].[FK_StatusId] point to this entity (FK_DatabaseManagement_Statuses)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TblDatabaseManagement> TblDatabaseManagements { get; set; } // Tbl_DatabaseManagement.FK_DatabaseManagement_Statuses
        /// <summary>
        /// Child TblMetaqueries where [Tbl_Metaqueries].[FK_StatusId] point to this entity (FK_Tbl_Metaqueries_Tbl_Statuses)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TblMetaquery> TblMetaqueries { get; set; } // Tbl_Metaqueries.FK_Tbl_Metaqueries_Tbl_Statuses

        public TblStatus()
        {
            TblDatabaseManagements = new System.Collections.Generic.List<TblDatabaseManagement>();
            TblMetaqueries = new System.Collections.Generic.List<TblMetaquery>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // V_MetaqueriesResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class VMetaqueriesResult
    {
        public int Id { get; set; } // Id (Primary key)
        public int FkMetaqueryId { get; set; } // FK_MetaqueryID (Primary key)
        public string Metaquery { get; set; } // Metaquery (Primary key)
        public decimal SupportValue { get; set; } // SupportValue (Primary key)
        public decimal ConfidenceValue { get; set; } // ConfidenceValue (Primary key)
        public string Assignment { get; set; } // Assignment (Primary key)

        public VMetaqueriesResult()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // V_Metaqueries
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class VMetaquery
    {
        public int Id { get; set; } // Id (Primary key)
        public int FkDatabaseId { get; set; } // FK_DatabaseID (Primary key)
        public string Metaquery { get; set; } // Metaquery (Primary key)
        public int FkStatusId { get; set; } // FK_StatusId (Primary key)
        public string Description { get; set; } // Description (length: 100)
        public int? HasResult { get; set; } // HasResult
        public bool IsExpanded { get; set; } // IsExpanded (Primary key)
        public int Arity { get; set; } // Arity (Primary key)
        public System.DateTime? CreatedDate { get; set; } // CreatedDate
        public System.DateTime LastUpdatedDate { get; set; } // LastUpdatedDate (Primary key)
        public System.DateTime? StartTime { get; set; } // StartTime
        public System.DateTime? FinishTime { get; set; } // FinishTime

        public VMetaquery()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // Sys_ColumnsTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class SysColumnsTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SysColumnsType>
    {
        public SysColumnsTypeConfiguration()
            : this("dbo")
        {
        }

        public SysColumnsTypeConfiguration(string schema)
        {
            ToTable("Sys_ColumnsTypes", schema);
            HasKey(x => new { x.TableName, x.ColumnName, x.Type });

            Property(x => x.TableName).HasColumnName(@"TableName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ColumnName).HasColumnName(@"ColumnName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Tbl_DatabaseManagement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblDatabaseManagementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblDatabaseManagement>
    {
        public TblDatabaseManagementConfiguration()
            : this("dbo")
        {
        }

        public TblDatabaseManagementConfiguration(string schema)
        {
            ToTable("Tbl_DatabaseManagement", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DbName).HasColumnName(@"DBName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ConnectionString).HasColumnName(@"ConnectionString").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.SupportThreshold).HasColumnName(@"SupportThreshold").HasColumnType("numeric").IsRequired().HasPrecision(10,2);
            Property(x => x.ConfidenceThreshold).HasColumnName(@"ConfidenceThreshold").HasColumnType("numeric").IsRequired().HasPrecision(10,2);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.FinishTime).HasColumnName(@"FinishTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.FkStatusId).HasColumnName(@"FK_StatusId").HasColumnType("int").IsRequired();
            Property(x => x.LastUpdatedDate).HasColumnName(@"LastUpdatedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.MaxVariablesInRelation).HasColumnName(@"MaxVariablesInRelation").HasColumnType("int").IsRequired();
            Property(x => x.CurrentArity).HasColumnName(@"CurrentArity").HasColumnType("int").IsRequired();
            Property(x => x.MaxArity).HasColumnName(@"MaxArity").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.TblStatus).WithMany(b => b.TblDatabaseManagements).HasForeignKey(c => c.FkStatusId).WillCascadeOnDelete(false); // FK_DatabaseManagement_Statuses
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Tbl_MetaqueriesResults
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblMetaqueriesResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblMetaqueriesResult>
    {
        public TblMetaqueriesResultConfiguration()
            : this("dbo")
        {
        }

        public TblMetaqueriesResultConfiguration(string schema)
        {
            ToTable("Tbl_MetaqueriesResults", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FkMetaqueryId).HasColumnName(@"FK_MetaqueryID").HasColumnType("int").IsRequired();
            Property(x => x.SupportValue).HasColumnName(@"SupportValue").HasColumnType("numeric").IsRequired().HasPrecision(10,2);
            Property(x => x.ConfidenceValue).HasColumnName(@"ConfidenceValue").HasColumnType("numeric").IsRequired().HasPrecision(10,2);
            Property(x => x.Assignment).HasColumnName(@"Assignment").HasColumnType("nvarchar(max)").IsRequired();

            // Foreign keys
            HasRequired(a => a.TblMetaquery).WithMany(b => b.TblMetaqueriesResults).HasForeignKey(c => c.FkMetaqueryId).WillCascadeOnDelete(false); // FK_Tbl_MetaqueriesResults_Tbl_Metaqueries
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Tbl_Metaqueries
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblMetaqueryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblMetaquery>
    {
        public TblMetaqueryConfiguration()
            : this("dbo")
        {
        }

        public TblMetaqueryConfiguration(string schema)
        {
            ToTable("Tbl_Metaqueries", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FkDatabaseId).HasColumnName(@"FK_DatabaseID").HasColumnType("int").IsRequired();
            Property(x => x.Metaquery).HasColumnName(@"Metaquery").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.FkStatusId).HasColumnName(@"FK_StatusId").HasColumnType("int").IsRequired();
            Property(x => x.HasResult).HasColumnName(@"HasResult").HasColumnType("int").IsOptional();
            Property(x => x.IsExpanded).HasColumnName(@"IsExpanded").HasColumnType("bit").IsRequired();
            Property(x => x.Arity).HasColumnName(@"Arity").HasColumnType("int").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.LastUpdatedDate).HasColumnName(@"LastUpdatedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.FinishTime).HasColumnName(@"FinishTime").HasColumnType("datetime2").IsOptional();

            // Foreign keys
            HasRequired(a => a.TblDatabaseManagement).WithMany(b => b.TblMetaqueries).HasForeignKey(c => c.FkDatabaseId).WillCascadeOnDelete(false); // FK_Tbl_Metaqueries_Tbl_DatabaseManagement
            HasRequired(a => a.TblStatus).WithMany(b => b.TblMetaqueries).HasForeignKey(c => c.FkStatusId).WillCascadeOnDelete(false); // FK_Tbl_Metaqueries_Tbl_Statuses
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Tbl_Statuses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class TblStatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblStatus>
    {
        public TblStatusConfiguration()
            : this("dbo")
        {
        }

        public TblStatusConfiguration(string schema)
        {
            ToTable("Tbl_Statuses", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // V_MetaqueriesResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class VMetaqueriesResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VMetaqueriesResult>
    {
        public VMetaqueriesResultConfiguration()
            : this("dbo")
        {
        }

        public VMetaqueriesResultConfiguration(string schema)
        {
            ToTable("V_MetaqueriesResult", schema);
            HasKey(x => new { x.Id, x.FkMetaqueryId, x.Metaquery, x.SupportValue, x.ConfidenceValue, x.Assignment });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FkMetaqueryId).HasColumnName(@"FK_MetaqueryID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Metaquery).HasColumnName(@"Metaquery").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SupportValue).HasColumnName(@"SupportValue").HasColumnType("numeric").IsRequired().HasPrecision(10,2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ConfidenceValue).HasColumnName(@"ConfidenceValue").HasColumnType("numeric").IsRequired().HasPrecision(10,2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Assignment).HasColumnName(@"Assignment").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // V_Metaqueries
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public partial class VMetaqueryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VMetaquery>
    {
        public VMetaqueryConfiguration()
            : this("dbo")
        {
        }

        public VMetaqueryConfiguration(string schema)
        {
            ToTable("V_Metaqueries", schema);
            HasKey(x => new { x.Id, x.FkDatabaseId, x.Metaquery, x.FkStatusId, x.IsExpanded, x.Arity, x.LastUpdatedDate });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FkDatabaseId).HasColumnName(@"FK_DatabaseID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Metaquery).HasColumnName(@"Metaquery").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FkStatusId).HasColumnName(@"FK_StatusId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.HasResult).HasColumnName(@"HasResult").HasColumnType("int").IsOptional();
            Property(x => x.IsExpanded).HasColumnName(@"IsExpanded").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Arity).HasColumnName(@"Arity").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.LastUpdatedDate).HasColumnName(@"LastUpdatedDate").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.FinishTime).HasColumnName(@"FinishTime").HasColumnType("datetime2").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

